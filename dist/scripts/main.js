(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

// import TweenMax from 'TweenMax'
// import View from './views/view'

// const g = 9.81;

// Register Listeners

$(document).ready(function () {

	// Random Data
	// let data = [];
	// for (let k = 0; k < rowN; k += 1) {
	// 	let row = [];
	// 	data.push(row);
	// 	for (let i = 0; i < colN; i +=1){
	// 		row.push([i, Math.trunc(Math.random()*rrange)])
	// 	}
	// }

	// Row calculation
	var initDataSet = function initDataSet() {
		var data = [];
		var t = 1;
		for (var k = 0; k < rowN; k += 1) {
			var row = [];
			data.push(row);
			for (var i = 0; i < colN; i += 1) {
				row.push([t, 0]);
				t = t + 1;
			}
		}
		return data;
	};

	var renderGraph = function renderGraph(data) {

		// Create a group for each row in the data matrix and
		// translate the group vertically
		var grp = svg.selectAll('g').data(data).enter().append('g').attr('transform', function (d, i) {
			return 'translate(5, ' + 54 * i + ')';
		});

		// For each group, create a set of rectangles and bind
		// them to the inner array (the inner array is already
		// binded to the group)
		grp.selectAll('rect').data(function (d) {
			return d;
		}).enter().append('rect').attr('x', function (d, i) {
			return 28 * i;
		}).attr('fill', function (d, i) {
			return lookup[d[1]];
		}).attr('width', rw).attr('height', rh);

		alert('wait');

		//Modulo 10 ticks       
		grp.selectAll('line').data(function (d) {
			return d;
		}).enter().append('line').filter(function (d, i) {
			return i % 10 === 0;
		}).attr('x1', function (d, i) {
			return 280 * i + 1;
		}).attr('y1', 20).attr('x2', function (d, i) {
			return 280 * i + 1;
		}).attr('y2', 40).style('stroke', 'black').style('stroke-width', '2px');

		// Text
		grp.selectAll('text').data(function (d) {
			return d;
		}).enter().append('text').filter(function (d, i) {
			return i % 10 === 0;
		}).attr('x', function (d, i) {
			return 280 * i + 5;
		}).attr('y', '38').attr('font-family', 'sans-serif').text(function (d, i, k) {
			return k * 40 + i * 10 + 1;
		});
	};

	// get values

	var getButtonIds = function getButtonIds() {
		return ['#btn-row1-1', '#btn-row1-2', '#btn-row1-3', '#btn-row1-4'];
	};

	var readInput = function readInput() {
		var ids = getButtonIds();
		var out = [];
		for (var i in ids) {
			var val = $(ids[i]).parent().parent().children('input')[0].value;
			out.push(val);
		}
		return out;
	};

	// Redraw Game

	var redraw = function redraw(inpstrarr) {
		var inp = [];
		// parse input
		for (var i = 0; i < inpstrarr.length; i++) {
			inp.push(parseInt(inpstrarr[i]));
		};

		// init values
		var t = 1,
		    // cout value
		col = 0,
		    // current color offset
		data = [],
		    nextEvent = inp[col],
		    tmp = 0;

		for (var k = 0; k < rowN; k += 1) {
			var row = [];
			data.push(row);
			for (var i = 0; i < colN; i += 1) {
				if (t === nextEvent) {
					// jump over 0 color entries
					while (inp[(col + 1) % inp.length] < 1) {
						col = (col + 1) % inp.length;
					}
					nextEvent += inp[(col + 1) % inp.length];
					tmp = col + 1; // black has index 0
					col = (col + 1) % inp.length; // next color
				} else {
						tmp = 0;
					}
				row.push([t, tmp]);
				t = t + 1;
			}
		}
		return data;
	};

	var registerInputOnChange = function registerInputOnChange() {
		var ids = getButtonIds();
		for (var i in ids) {
			$(ids[i]).parent().parent().children('input.form-control').change(function () {
				var newdata = redraw(readInput());
				renderGraph(newdata);
			});
		}
	};

	// Listen on Menu entry
	var idArr = getButtonIds();
	var ec = jQuery.Event('change');

	var _loop = function _loop(i) {
		$(idArr[i]).parent().children('ul.dropdown-menu').on('click', function (e) {
			$(idArr[i]).parent().parent().children('input.form-control').attr('value', e.target.text)
			//send change event
			.trigger(ec);
		});
	};

	for (var i in idArr) {
		_loop(i);
	}

	// Init Display   
	// Draw so stuff
	// Global stuff
	var width = 1230,
	    height = 400,
	    div = d3.select('#chart'),
	    svg = div.append('svg').attr('width', width).attr('height', height),
	    rw = 20,
	    rh = 20,
	    rowN = 4,
	    colN = 40,
	    lookup = ['black', '#296EAA', '#D43F3A', '#5CB85C', '#46B0CF'],
	    rrange = lookup.length;
	//data = initDataSet();
	//renderGraph(data);

	// React on Changes of the input fields

	registerInputOnChange();
	var mydata = redraw(readInput());
	renderGraph(mydata);
	alert("wart mal");
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJzcmMvc2NyaXB0cy9tYWluLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7O0FDT0EsRUFBRSxRQUFGLEVBQVksS0FBWixDQUFrQixZQUFVOzs7Ozs7Ozs7Ozs7O0FBZTVCLEtBQUksY0FBYyxTQUFkLFdBQWMsR0FBSztBQUN0QixNQUFJLE9BQU8sRUFBUCxDQURrQjtBQUV0QixNQUFJLElBQUksQ0FBSixDQUZrQjtBQUd0QixPQUFLLElBQUksSUFBSSxDQUFKLEVBQU8sSUFBSSxJQUFKLEVBQVUsS0FBSyxDQUFMLEVBQVE7QUFDakMsT0FBSSxNQUFNLEVBQU4sQ0FENkI7QUFFakMsUUFBSyxJQUFMLENBQVUsR0FBVixFQUZpQztBQUdqQyxRQUFLLElBQUksSUFBSSxDQUFKLEVBQU8sSUFBSSxJQUFKLEVBQVUsS0FBSSxDQUFKLEVBQU07QUFDL0IsUUFBSSxJQUFKLENBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUFULEVBRCtCO0FBRS9CLFFBQUksSUFBSSxDQUFKLENBRjJCO0lBQWhDO0dBSEQ7QUFRQSxTQUFPLElBQVAsQ0FYc0I7RUFBTCxDQWZVOztBQThCNUIsS0FBSSxjQUFjLFNBQWQsV0FBYyxDQUFDLElBQUQsRUFBVTs7OztBQU0zQixNQUFJLE1BQU0sSUFBSSxTQUFKLENBQWMsR0FBZCxFQUNMLElBREssQ0FDQSxJQURBLEVBRUwsS0FGSyxHQUdMLE1BSEssQ0FHRSxHQUhGLEVBSUwsSUFKSyxDQUlBLFdBSkEsRUFJYSxVQUFTLENBQVQsRUFBWSxDQUFaLEVBQWU7QUFDOUIsVUFBTyxrQkFBa0IsS0FBSyxDQUFMLEdBQVMsR0FBM0IsQ0FEdUI7R0FBZixDQUpuQjs7Ozs7QUFOdUIsS0FpQjNCLENBQUksU0FBSixDQUFjLE1BQWQsRUFDSyxJQURMLENBQ1UsVUFBUyxDQUFULEVBQVk7QUFBRSxVQUFPLENBQVAsQ0FBRjtHQUFaLENBRFYsQ0FFSyxL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SSxTQUFTLE9BQU8sV0FBUCxDQUFULENBN0x3QjtBQThMNUIsYUFBWSxNQUFaLEVBOUw0QjtBQStMNUIsT0FBTSxVQUFOLEVBL0w0QjtDQUFWLENBQWxCIiwiZmlsZSI6ImdlbmVyYXRlZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gZSh0LG4scil7ZnVuY3Rpb24gcyhvLHUpe2lmKCFuW29dKXtpZighdFtvXSl7dmFyIGE9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtpZighdSYmYSlyZXR1cm4gYShvLCEwKTtpZihpKXJldHVybiBpKG8sITApO3ZhciBmPW5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIG1vZHVsZSAnXCIrbytcIidcIik7dGhyb3cgZi5jb2RlPVwiTU9EVUxFX05PVF9GT1VORFwiLGZ9dmFyIGw9bltvXT17ZXhwb3J0czp7fX07dFtvXVswXS5jYWxsKGwuZXhwb3J0cyxmdW5jdGlvbihlKXt2YXIgbj10W29dWzFdW2VdO3JldHVybiBzKG4/bjplKX0sbCxsLmV4cG9ydHMsZSx0LG4scil9cmV0dXJuIG5bb10uZXhwb3J0c312YXIgaT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2Zvcih2YXIgbz0wO288ci5sZW5ndGg7bysrKXMocltvXSk7cmV0dXJuIHN9KSIsIi8vIGltcG9ydCBUd2Vlbk1heCBmcm9tICdUd2Vlbk1heCdcbi8vIGltcG9ydCBWaWV3IGZyb20gJy4vdmlld3MvdmlldydcblxuLy8gY29uc3QgZyA9IDkuODE7XG5cbi8vIFJlZ2lzdGVyIExpc3RlbmVyc1xuXG4kKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbigpe1xuXG5cblxuLy8gUmFuZG9tIERhdGFcblx0Ly8gbGV0IGRhdGEgPSBbXTtcblx0Ly8gZm9yIChsZXQgayA9IDA7IGsgPCByb3dOOyBrICs9IDEpIHtcblx0Ly8gXHRsZXQgcm93ID0gW107XG5cdC8vIFx0ZGF0YS5wdXNoKHJvdyk7XG5cdC8vIFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBjb2xOOyBpICs9MSl7XG5cdC8vIFx0XHRyb3cucHVzaChbaSwgTWF0aC50cnVuYyhNYXRoLnJhbmRvbSgpKnJyYW5nZSldKVxuXHQvLyBcdH1cblx0Ly8gfVxuXG4vLyBSb3cgY2FsY3VsYXRpb25cbmxldCBpbml0RGF0YVNldCA9ICgpID0+e1xuXHRsZXQgZGF0YSA9IFtdO1xuXHRsZXQgdCA9IDE7XG5cdGZvciAobGV0IGsgPSAwOyBrIDwgcm93TjsgayArPSAxKSB7XG5cdFx0bGV0IHJvdyA9IFtdO1xuXHRcdGRhdGEucHVzaChyb3cpO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgY29sTjsgaSArPTEpe1xuXHRcdFx0cm93LnB1c2goW3QsIDBdKTtcblx0XHRcdHQgPSB0ICsgMTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGRhdGE7XG59O1xuXG5cbmxldCByZW5kZXJHcmFwaCA9IChkYXRhKSA9PiB7XG5cblxuXG5cdC8vIENyZWF0ZSBhIGdyb3VwIGZvciBlYWNoIHJvdyBpbiB0aGUgZGF0YSBtYXRyaXggYW5kXG5cdC8vIHRyYW5zbGF0ZSB0aGUgZ3JvdXAgdmVydGljYWxseVxuXHRsZXQgZ3JwID0gc3ZnLnNlbGVjdEFsbCgnZycpXG5cdCAgICAuZGF0YShkYXRhKVxuXHQgICAgLmVudGVyKClcblx0ICAgIC5hcHBlbmQoJ2cnKVxuXHQgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGZ1bmN0aW9uKGQsIGkpIHtcblx0ICAgICAgICByZXR1cm4gJ3RyYW5zbGF0ZSg1LCAnICsgNTQgKiBpICsgJyknO1xuXHQgICAgfSk7XG5cblx0Ly8gRm9yIGVhY2ggZ3JvdXAsIGNyZWF0ZSBhIHNldCBvZiByZWN0YW5nbGVzIGFuZCBiaW5kIFxuXHQvLyB0aGVtIHRvIHRoZSBpbm5lciBhcnJheSAodGhlIGlubmVyIGFycmF5IGlzIGFscmVhZHlcblx0Ly8gYmluZGVkIHRvIHRoZSBncm91cClcblx0Z3JwLnNlbGVjdEFsbCgncmVjdCcpXG5cdCAgICAuZGF0YShmdW5jdGlvbihkKSB7IHJldHVybiBkOyB9KVxuXHQgICAgLmVudGVyKClcblx0ICAgIC5hcHBlbmQoJ3JlY3QnKVxuXHQgICAgICAgIC5hdHRyKCd4JywgZnVuY3Rpb24oZCwgaSkgeyByZXR1cm4gMjggKiBpOyB9KVxuXHQgICAgICAgIC5hdHRyKCdmaWxsJywgZnVuY3Rpb24oZCxpKSB7IHJldHVybiBsb29rdXBbZFsxXV07fSlcblx0ICAgICAgICAuYXR0cignd2lkdGgnLCBydylcblx0ICAgICAgICAuYXR0cignaGVpZ2h0JywgcmgpO1xuXG5cdGFsZXJ0KCd3YWl0Jyk7ICAgICAgICBcblxuXHQvL01vZHVsbyAxMCB0aWNrcyAgICAgICAgXG5cdGdycC5zZWxlY3RBbGwoJ2xpbmUnKVxuXHQgICAgLmRhdGEoIChkKSA9PiBkKVxuXHQgICAgLmVudGVyKCkuYXBwZW5kKCdsaW5lJylcblx0ICAgIC5maWx0ZXIoKGQsaSkgPT4gaSUxMD09PTApXG4gIFx0XHRcdC5hdHRyKCd4MScsICAoZCwgaSkgPT4geyByZXR1cm4gMjgwICogaSsxOyB9KVxuICBcdFx0XHQuYXR0cigneTEnLCAyMClcbiAgXHRcdFx0LmF0dHIoJ3gyJywgKGQsIGkpID0+IHsgcmV0dXJuIDI4MCAqIGkrMTsgfSlcbiAgXHRcdFx0LmF0dHIoJ3kyJyw0MClcbiAgXHRcdFx0LnN0eWxlKCdzdHJva2UnLCAnYmxhY2snKVxuICBcdFx0XHQuc3R5bGUoJ3N0cm9rZS13aWR0aCcsJzJweCcpOyAgICAgIFxuXG4gIFx0Ly8gVGV4dCBcbiAgXHRncnAuc2VsZWN0QWxsKCd0ZXh0Jylcblx0ICAgIC5kYXRhKCAoZCkgPT4gZClcblx0ICAgIC5lbnRlcigpLmFwcGVuZCgndGV4dCcpXG5cdCAgICAuZmlsdGVyKChkLGkpID0+IGklMTA9PT0wKVxuXHQgICAgXHQuYXR0cigneCcsIChkLCBpKSA9PiB7IHJldHVybiAyODAgKiBpKzU7IH0pXG5cdCAgICBcdC5hdHRyKCd5JywgJzM4JykgIFxuXHQgICAgXHQuYXR0cignZm9udC1mYW1pbHknLCAnc2Fucy1zZXJpZicpIFxuXHQgICAgXHQudGV4dCggKGQsIGksaykgPT4gayo0MCtpKjEwKzEpOyBcbn07XG5cblxuLy8gZ2V0IHZhbHVlc1xuXG5sZXQgZ2V0QnV0dG9uSWRzID0gKCkgPT4gWycjYnRuLXJvdzEtMScsJyNidG4tcm93MS0yJywnI2J0bi1yb3cxLTMnLCcjYnRuLXJvdzEtNCddO1xuXG5sZXQgcmVhZElucHV0ID0gKCkgPT4ge1xuXHRsZXQgaWRzID0gZ2V0QnV0dG9uSWRzKCk7XG5cdGxldCBvdXQgPSBbXTtcblx0Zm9yIChsZXQgaSBpbiBpZHMpIHtcblx0XHRsZXQgdmFsID0gJChpZHNbaV0pLnBhcmVudCgpLnBhcmVudCgpLmNoaWxkcmVuKCdpbnB1dCcpWzBdLnZhbHVlO1xuXHRcdG91dC5wdXNoKHZhbCk7XG5cdH1cblx0cmV0dXJuIG91dDtcbn07XG5cbi8vIFJlZHJhdyBHYW1lXG5cbmxldCByZWRyYXcgPSAoaW5wc3RyYXJyKSA9PiB7XG5cdGxldCBpbnAgPSBbXTtcblx0Ly8gcGFyc2UgaW5wdXRcblx0Zm9yIChsZXQgaSA9IDA7IGkgPCBpbnBzdHJhcnIubGVuZ3RoOyBpKyspe1xuXHRcdGlucC5wdXNoKHBhcnNlSW50KGlucHN0cmFycltpXSkpO1xuXHR9O1xuXG4gICAgLy8gaW5pdCB2YWx1ZXNcblx0bGV0IHQgPSAxLCAvLyBjb3V0IHZhbHVlXG5cdFx0Y29sID0gMCwgLy8gY3VycmVudCBjb2xvciBvZmZzZXRcblx0XHRkYXRhID0gW10sXG5cdFx0bmV4dEV2ZW50ID0gaW5wW2NvbF0sXG5cdFx0dG1wID0gMDtcblxuXHRmb3IgKGxldCBrID0gMDsgayA8IHJvd047IGsgKz0gMSkge1xuXHRcdGxldCByb3cgPSBbXTtcblx0XHRkYXRhLnB1c2gocm93KTtcblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IGNvbE47IGkgKz0xKXtcblx0XHRcdGlmICh0ID09PSAgbmV4dEV2ZW50KXtcblx0XHRcdFx0Ly8ganVtcCBvdmVyIDAgY29sb3IgZW50cmllc1xuXHRcdFx0XHR3aGlsZSAoaW5wWyhjb2wrMSklaW5wLmxlbmd0aF0gPCAxKXtcblx0XHRcdFx0XHRjb2wgPSAoY29sKzEpJWlucC5sZW5ndGg7XG5cdFx0XHRcdH1cblx0XHRcdFx0bmV4dEV2ZW50ICs9IGlucFsoY29sKzEpJWlucC5sZW5ndGhdO1xuXHRcdFx0XHR0bXAgPSBjb2wrMTsgLy8gYmxhY2sgaGFzIGluZGV4IDBcblx0XHRcdFx0Y29sID0gKGNvbCsxKSVpbnAubGVuZ3RoOyAvLyBuZXh0IGNvbG9yXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSAwO1xuXHRcdFx0fVxuXHRcdFx0cm93LnB1c2goW3QsIHRtcF0pO1xuXHRcdFx0dCA9IHQgKyAxO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gZGF0YTtcbn1cblxuXG5sZXQgcmVnaXN0ZXJJbnB1dE9uQ2hhbmdlID0gKCkgPT4ge1xuXHRsZXQgaWRzID0gZ2V0QnV0dG9uSWRzKCk7XG5cdGZvciAobGV0IGkgaW4gaWRzKSB7XG5cdFx0JChpZHNbaV0pXG5cdFx0XHQucGFyZW50KClcblx0XHRcdC5wYXJlbnQoKVxuXHRcdFx0LmNoaWxkcmVuKCdpbnB1dC5mb3JtLWNvbnRyb2wnKVxuXHRcdFx0LmNoYW5nZSgoKSA9PiB7XG5cdFx0XHRcdGxldCBuZXdkYXRhID0gcmVkcmF3KHJlYWRJbnB1dCgpKTtcblx0XHRcdFx0cmVuZGVyR3JhcGgobmV3ZGF0YSk7XG5cdFx0XHR9KTtcblx0fVxufTtcblxuLy8gTGlzdGVuIG9uIE1lbnUgZW50cnlcblx0bGV0IGlkQXJyID0gZ2V0QnV0dG9uSWRzKCk7XG5cdGxldCBlYyA9IGpRdWVyeS5FdmVudCggJ2NoYW5nZScgKTtcbiAgICBmb3IgKGxldCBpIGluIGlkQXJyKSB7XG4gICAgXHQkKGlkQXJyW2ldKVxuXHRcdFx0LnBhcmVudCgpXG5cdFx0XHQuY2hpbGRyZW4oJ3VsLmRyb3Bkb3duLW1lbnUnKVxuXHRcdFx0Lm9uKCdjbGljaycsIChlKSA9PiB7XG5cdFx0XHRcdCQoaWRBcnJbaV0pXG5cdFx0XHRcdC5wYXJlbnQoKVxuXHRcdFx0XHQucGFyZW50KClcblx0XHRcdFx0LmNoaWxkcmVuKCdpbnB1dC5mb3JtLWNvbnRyb2wnKVxuXHRcdFx0XHQuYXR0cigndmFsdWUnLGUudGFyZ2V0LnRleHQpXG5cdFx0XHRcdC8vc2VuZCBjaGFuZ2UgZXZlbnRcblx0XHRcdFx0LnRyaWdnZXIoZWMpO1xuXHRcdH0pO1x0XG4gICAgfVxuXG5cbi8vIEluaXQgRGlzcGxheSAgICBcblx0Ly8gRHJhdyBzbyBzdHVmZlxuXHQvLyBHbG9iYWwgc3R1ZmZcblx0bGV0IHdpZHRoID0gMTIzMCxcbiAgICBoZWlnaHQgPSA0MDAsXG4gICAgZGl2ID0gZDMuc2VsZWN0KCcjY2hhcnQnKSxcbiAgICBzdmcgPSBkaXYuYXBwZW5kKCdzdmcnKVxuICAgICAgICAuYXR0cignd2lkdGgnLCB3aWR0aClcbiAgICAgICAgLmF0dHIoJ2hlaWdodCcsIGhlaWdodCksXG4gICAgcncgPSAyMCxcbiAgICByaCA9IDIwLFxuICAgIHJvd04gPSA0LFxuICAgIGNvbE4gPTQwLFxuICAgIGxvb2t1cCA9IFsnYmxhY2snLCcjMjk2RUFBJywnI0Q0M0YzQScsJyM1Q0I4NUMnLCcjNDZCMENGJ10sXG4gICAgcnJhbmdlID0gbG9va3VwLmxlbmd0aDtcbiAgICAvL2RhdGEgPSBpbml0RGF0YVNldCgpO1xuICAgIC8vcmVuZGVyR3JhcGgoZGF0YSk7XG5cbi8vIFJlYWN0IG9uIENoYW5nZXMgb2YgdGhlIGlucHV0IGZpZWxkc1xuXG5yZWdpc3RlcklucHV0T25DaGFuZ2UoKTtcbmxldCBteWRhdGEgPSByZWRyYXcocmVhZElucHV0KCkpO1xucmVuZGVyR3JhcGgobXlkYXRhKTtcbmFsZXJ0KFwid2FydCBtYWxcIik7XG59KTtcblxuXG5cbiJdfQ==
