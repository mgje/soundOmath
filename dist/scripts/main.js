(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

// import TweenMax from 'TweenMax'
// import View from './views/view'

// const g = 9.81;

// Register Listeners

$(document).ready(function () {

	// Random Data
	// let data = [];
	// for (let k = 0; k < rowN; k += 1) {
	// 	let row = [];
	// 	data.push(row);
	// 	for (let i = 0; i < colN; i +=1){
	// 		row.push([i, Math.trunc(Math.random()*rrange)])
	// 	}
	// }

	// Row calculation
	var initDataSet = function initDataSet() {
		var data = [];
		var t = 1;
		for (var k = 0; k < rowN; k += 1) {
			var row = [];
			data.push(row);
			for (var i = 0; i < colN; i += 1) {
				row.push([t, 0]);
				t = t + 1;
			}
		}
		return data;
	};

	var renderGraph = function renderGraph(data) {

		// Create a group for each row in the data matrix and
		// translate the group vertically
		var grp = svg.selectAll('g').data(data).enter().append('g').attr('transform', function (d, i) {
			return 'translate(5, ' + 54 * i + ')';
		});

		// For each group, create a set of rectangles and bind
		// them to the inner array (the inner array is already
		// binded to the group)
		grp.selectAll('rect').data(function (d) {
			return d;
		}).enter().append('rect').attr('x', function (d, i) {
			return 28 * i;
		}).attr('fill', function (d, i) {
			return lookup[d[1]];
		}).attr('width', rw).attr('height', rh);

		//Modulo 10 ticks       
		grp.selectAll('line').data(function (d) {
			return d;
		}).enter().append('line').filter(function (d, i) {
			return i % 10 === 0;
		}).attr('x1', function (d, i) {
			return 280 * i + 1;
		}).attr('y1', 20).attr('x2', function (d, i) {
			return 280 * i + 1;
		}).attr('y2', 40).style('stroke', 'black').style('stroke-width', '2px');

		// Text
		grp.selectAll('text').data(function (d) {
			return d;
		}).enter().append('text').filter(function (d, i) {
			return i % 10 === 0;
		}).attr('x', function (d, i) {
			return 280 * i + 5;
		}).attr('y', '38').attr('font-family', 'sans-serif').text(function (d, i, k) {
			return k * 40 + i * 10 + 1;
		});
	};

	// get values

	var getButtonIds = function getButtonIds() {
		return ['#btn-row1-1', '#btn-row1-2', '#btn-row1-3', '#btn-row1-4'];
	};

	var readInput = function readInput() {
		var ids = getButtonIds();
		var out = [];
		for (var i in ids) {
			var val = $(ids[i]).parent().parent().children('input')[0].value;
			out.push(val);
		}
		return out;
	};

	// Redraw Game

	var redraw = function redraw() {
		var inp = [2, 6, 4, 7];
		var t = 1; // cout value
		var col = 0; // current color offset
		var data = [];
		var nextEvent = inp[col];
		var tmp = 0;
		for (var k = 0; k < rowN; k += 1) {
			var row = [];
			data.push(row);
			for (var i = 0; i < colN; i += 1) {
				if (t === nextEvent) {
					// jump over 0 color entries
					while (inp[(col + 1) % inp.length] < 1) {
						col = (col + 1) % inp.length;
					}
					nextEvent += inp[(col + 1) % inp.length];
					tmp = col + 1; // black has index 0
				} else {
						tmp = 0;
					}
				row.push([t, tmp]);
				t = t + 1;
			}
		}
		return data;
	};

	var registerInputOnChange = function registerInputOnChange() {
		var ids = getButtonIds();
		for (var i in ids) {
			$(ids[i]).parent().parent().children('input.form-control').change(function () {
				alert(readInput());
			});
			// .on('change', (e) => {
			// 	alert(readInput());
			// });
		}
	};

	// Listen on Menu entry
	var idArr = getButtonIds();
	var ec = jQuery.Event('change');

	var _loop = function _loop(i) {
		$(idArr[i]).parent().children('ul.dropdown-menu').on('click', function (e) {
			$(idArr[i]).parent().parent().children('input.form-control').attr('value', e.target.text)
			//send change event
			.trigger(ec);
		});
	};

	for (var i in idArr) {
		_loop(i);
	}

	// Init Display   
	// Draw so stuff
	// Global stuff
	var width = 1230,
	    height = 400,
	    div = d3.select('#chart'),
	    svg = div.append('svg').attr('width', width).attr('height', height),
	    rw = 20,
	    rh = 20,
	    rowN = 4,
	    colN = 40,
	    lookup = ['black', '#296EAA', '#D43F3A', '#5CB85C', '#46B0CF'],
	    rrange = lookup.length;
	//data = initDataSet();
	//renderGraph(data);

	// React on Changes of the input fields

	registerInputOnChange();
	var mydata = redraw();
	renderGraph(mydata);
	alert("wart mal");
});

},{}]},{},[1])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
